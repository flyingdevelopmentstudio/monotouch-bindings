<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCGLProgram" FullName="MonoTouch.Cocos2D.CCGLProgram">
  <TypeSignature Language="C#" Value="public class CCGLProgram : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCGLProgram extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Cocos2D</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CCGLProgram", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
        <see cref="T:MonoTouch.Cocos2D.CCGLProgram" /> Class that implements a glProgram</para>
    </summary>
    <remarks>
      <para>
        <see cref="T:MonoTouch.Cocos2D.CCGLProgram" /> Class that implements a glProgram</para>
      <para>
        <simplesect kind="since">
          <para>v2.0.0 </para>
        </simplesect>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCGLProgram ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCGLProgram (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCGLProgram (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCGLProgram (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCGLProgram (IntPtr vShaderByteArray, IntPtr fShaderByteArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int vShaderByteArray, native int fShaderByteArray) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithVertexShaderByteArray:fragmentShaderByteArray:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="vShaderByteArray" Type="System.IntPtr" />
        <Parameter Name="fShaderByteArray" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="vShaderByteArray">To be added.</param>
        <param name="fShaderByteArray">To be added.</param>
        <summary>
          <para>Initializes the <see cref="T:MonoTouch.Cocos2D.CCGLProgram" /> with a vertex and fragment with bytes array </para>
        </summary>
        <remarks>
          <para>Initializes the <see cref="T:MonoTouch.Cocos2D.CCGLProgram" /> with a vertex and fragment with bytes array </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCGLProgram (string vertexShaderFilename, string fragmentShaderFilename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string vertexShaderFilename, string fragmentShaderFilename) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithVertexShaderFilename:fragmentShaderFilename:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="vertexShaderFilename" Type="System.String" />
        <Parameter Name="fragmentShaderFilename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="vertexShaderFilename">To be added.</param>
        <param name="fragmentShaderFilename">To be added.</param>
        <summary>
          <para>Initializes the <see cref="T:MonoTouch.Cocos2D.CCGLProgram" /> with a vertex and fragment with contents of filenames </para>
        </summary>
        <remarks>
          <para>Initializes the <see cref="T:MonoTouch.Cocos2D.CCGLProgram" /> with a vertex and fragment with contents of filenames </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string attributeName, uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string attributeName, unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addAttribute:index:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="index">To be added.</param>
        <summary>
          <para>It will add a new attribute to the shader </para>
        </summary>
        <remarks>
          <para>It will add a new attribute to the shader </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFragmentShaderLog">
      <MemberSignature Language="C#" Value="public virtual string GetFragmentShaderLog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFragmentShaderLog() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fragmentShaderLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>returns the fragmentShader error log </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>returns the fragmentShader error log </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProgramLog">
      <MemberSignature Language="C#" Value="public virtual string GetProgramLog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetProgramLog() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("programLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>returns the program error log </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>returns the program error log </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVertexShaderLog">
      <MemberSignature Language="C#" Value="public virtual string GetVertexShaderLog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetVertexShaderLog() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("vertexShaderLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>returns the vertexShader error log </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>returns the vertexShader error log </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Link">
      <MemberSignature Language="C#" Value="public virtual bool Link ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Link() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("link")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>links the glProgram </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>links the glProgram </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUniformForModelViewProjectionMatrix">
      <MemberSignature Language="C#" Value="public virtual void SetUniformForModelViewProjectionMatrix ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUniformForModelViewProjectionMatrix() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setUniformForModelViewProjectionMatrix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>will update the MVP matrix on the MVP uniform if it is different than the previous call for this same shader program. </para>
        </summary>
        <remarks>
          <para>will update the MVP matrix on the MVP uniform if it is different than the previous call for this same shader program. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUniformLocation">
      <MemberSignature Language="C#" Value="public virtual void SetUniformLocation (uint location, int i1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUniformLocation(unsigned int32 location, int32 i1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setUniformLocation:withI1:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32" />
        <Parameter Name="i1" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="i1">To be added.</param>
        <summary>
          <para>calls glUniform1i only if the values are different than the previous call for this same shader program. </para>
        </summary>
        <remarks>
          <para>calls glUniform1i only if the values are different than the previous call for this same shader program. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUniformLocation">
      <MemberSignature Language="C#" Value="public virtual void SetUniformLocation (uint location, float f1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUniformLocation(unsigned int32 location, float32 f1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setUniformLocation:withF1:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32" />
        <Parameter Name="f1" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="f1">To be added.</param>
        <summary>
          <para>calls glUniform1f only if the values are different than the previous call for this same shader program. </para>
        </summary>
        <remarks>
          <para>calls glUniform1f only if the values are different than the previous call for this same shader program. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUniformLocation">
      <MemberSignature Language="C#" Value="public virtual void SetUniformLocation (uint location, float f1, float f2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUniformLocation(unsigned int32 location, float32 f1, float32 f2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setUniformLocation:withF1:f2:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32" />
        <Parameter Name="f1" Type="System.Single" />
        <Parameter Name="f2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="f1">To be added.</param>
        <param name="f2">To be added.</param>
        <summary>
          <para>calls glUniform2f only if the values are different than the previous call for this same shader program. </para>
        </summary>
        <remarks>
          <para>calls glUniform2f only if the values are different than the previous call for this same shader program. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUniformLocation">
      <MemberSignature Language="C#" Value="public virtual void SetUniformLocation (uint location, float f1, float f2, float f3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUniformLocation(unsigned int32 location, float32 f1, float32 f2, float32 f3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setUniformLocation:withF1:f2:f3:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32" />
        <Parameter Name="f1" Type="System.Single" />
        <Parameter Name="f2" Type="System.Single" />
        <Parameter Name="f3" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="f1">To be added.</param>
        <param name="f2">To be added.</param>
        <param name="f3">To be added.</param>
        <summary>
          <para>calls glUniform3f only if the values are different than the previous call for this same shader program. </para>
        </summary>
        <remarks>
          <para>calls glUniform3f only if the values are different than the previous call for this same shader program. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUniformLocation">
      <MemberSignature Language="C#" Value="public virtual void SetUniformLocation (uint location, float f1, float f2, float f3, float f4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUniformLocation(unsigned int32 location, float32 f1, float32 f2, float32 f3, float32 f4) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setUniformLocation:withF1:f2:f3:f4:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32" />
        <Parameter Name="f1" Type="System.Single" />
        <Parameter Name="f2" Type="System.Single" />
        <Parameter Name="f3" Type="System.Single" />
        <Parameter Name="f4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="f1">To be added.</param>
        <param name="f2">To be added.</param>
        <param name="f3">To be added.</param>
        <param name="f4">To be added.</param>
        <summary>
          <para>calls glUniform4f only if the values are different than the previous call for this same shader program. </para>
        </summary>
        <remarks>
          <para>calls glUniform4f only if the values are different than the previous call for this same shader program. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUniforms">
      <MemberSignature Language="C#" Value="public virtual void UpdateUniforms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateUniforms() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("updateUniforms")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>It will create 3 uniforms:<list type="bullet"><item><description>kCCUniformPMatrix</description></item><item><description>kCCUniformMVMatrix</description></item><item><description>kCCUniformSampler</description></item></list></para>
        </summary>
        <remarks>
          <para>It will create 3 uniforms:<list type="bullet"><item><description>kCCUniformPMatrix</description></item><item><description>kCCUniformMVMatrix</description></item><item><description>kCCUniformSampler</description></item></list></para>
          <para>And it will bind "kCCUniformSampler" to 0 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Use">
      <MemberSignature Language="C#" Value="public virtual void Use ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Use() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("use")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>it will call glUseProgram() </para>
        </summary>
        <remarks>
          <para>it will call glUseProgram() </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>