<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCNode" FullName="MonoTouch.Cocos2D.CCNode">
  <TypeSignature Language="C#" Value="public class CCNode : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCNode extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Cocos2D</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CCNode", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
        <see cref="T:MonoTouch.Cocos2D.CCNode" /> is the main element. Anything thats gets drawn or contains things that get drawn is a <see cref="T:MonoTouch.Cocos2D.CCNode" />. The most popular CCNodes are: <see cref="T:MonoTouch.Cocos2D.CCScene" />, CCLayer, <see cref="T:MonoTouch.Cocos2D.CCSprite" />, <see cref="T:MonoTouch.Cocos2D.CCMenu" />.</para>
    </summary>
    <remarks>
      <para>
        <see cref="T:MonoTouch.Cocos2D.CCNode" /> is the main element. Anything thats gets drawn or contains things that get drawn is a <see cref="T:MonoTouch.Cocos2D.CCNode" />. The most popular CCNodes are: <see cref="T:MonoTouch.Cocos2D.CCScene" />, CCLayer, <see cref="T:MonoTouch.Cocos2D.CCSprite" />, <see cref="T:MonoTouch.Cocos2D.CCMenu" />.</para>
      <para>The main features of a <see cref="T:MonoTouch.Cocos2D.CCNode" /> are:<list type="bullet"><item><description>They can contain other CCNode nodes (addChild, getChildByTag, removeChild, etc)</description></item><item><description>They can schedule periodic callback (schedule, unschedule, etc)</description></item><item><description>They can execute actions (runAction, stopAction, etc)</description></item></list></para>
      <para>Some <see cref="T:MonoTouch.Cocos2D.CCNode" /> nodes provide extra functionality for them or their children.</para>
      <para>Subclassing a <see cref="T:MonoTouch.Cocos2D.CCNode" /> usually means (one/all) of:<list type="bullet"><item><description>overriding init to initialize resources and schedule callbacks</description></item><item><description>create callbacks to handle the advancement of time</description></item><item><description>overriding draw to render the node</description></item></list></para>
      <para>Features of <see cref="T:MonoTouch.Cocos2D.CCNode" />:<list type="bullet"><item><description>position</description></item><item><description>scale (x, y)</description></item><item><description>rotation (in degrees, clockwise)</description></item><item><description>CCCamera (an interface to gluLookAt )</description></item><item><description>CCGridBase (to do mesh transformations)</description></item><item><description>anchor point</description></item><item><description>size</description></item><item><description>visible</description></item><item><description>z-order</description></item><item><description>openGL z position</description></item></list></para>
      <para>Default values:<list type="bullet"><item><description>rotation: 0</description></item><item><description>position: (x=0,y=0)</description></item><item><description>scale: (x=1,y=1)</description></item><item><description>contentSize: (x=0,y=0)</description></item><item><description>anchorPoint: (x=0,y=0)</description></item></list></para>
      <para>Limitations:<list type="bullet"><item><description>A CCNode is a "void" object. It doesn't have a texture</description></item></list></para>
      <para>Order in transformations with grid disabled<list type="number"><item><description>The node will be translated (position)</description></item><item><description>The node will be rotated (rotation)</description></item><item><description>The node will be skewed (skewX, skewY)</description></item><item><description>The node will be scaled (scale, scaleX, scaleY)</description></item><item><description>The node will be moved according to the camera values (camera)</description></item></list></para>
      <para>Order in transformations with grid enabled<list type="number"><item><description>The node will be translated (position)</description></item><item><description>The node will be rotated (rotation)</description></item><item><description>The node will be skewed (skewX, skewY)</description></item><item><description>The node will be scaled (scale, scaleX, scaleY)</description></item><item><description>The grid will capture the screen</description></item><item><description>The node will be moved according to the camera values (camera)</description></item><item><description>The grid will render the captured screen</description></item></list></para>
      <para>Camera:<list type="bullet"><item><description>Each node has a camera. By default it points to the center of the CCNode. </description></item></list></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <para>initializes the node </para>
        </summary>
        <remarks>
          <para>initializes the node </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCNode (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (MonoTouch.Cocos2D.CCNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MonoTouch.Cocos2D.CCNode child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addChild:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="MonoTouch.Cocos2D.CCNode" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <summary>
          <para>Adds a child to the container with z-order as 0. If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Adds a child to the container with z-order as 0. If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (MonoTouch.Cocos2D.CCNode child, int zIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MonoTouch.Cocos2D.CCNode child, int32 zIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addChild:z:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="MonoTouch.Cocos2D.CCNode" />
        <Parameter Name="zIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zIndex">To be added.</param>
        <summary>
          <para>Adds a child to the container with a z-order. If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Adds a child to the container with a z-order. If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (MonoTouch.Cocos2D.CCNode child, int zIndex, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MonoTouch.Cocos2D.CCNode child, int32 zIndex, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addChild:z:tag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="MonoTouch.Cocos2D.CCNode" />
        <Parameter Name="zIndex" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zIndex">To be added.</param>
        <param name="tag">To be added.</param>
        <summary>
          <para>Adds a child to the container with z order and tag. If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Adds a child to the container with z order and tag. If the child is added to a 'running' node, then 'onEnter' and 'onEnterTransitionDidFinish' will be called immediately. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.PointF AnchorPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("anchorPoint")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAnchorPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>anchorPoint is the point around which all transformations and positioning manipulations take place. It's like a pin in the node where it is "attached" to its parent. The anchorPoint is normalized, like a percentage. (0,0) means the bottom-left corner and (1,1) means the top-right corner. But you can use values higher than (1,1) and lower than (0,0) too. The default anchorPoint is (0,0). It starts in the bottom-left corner. <see cref="T:MonoTouch.Cocos2D.CCSprite" /> and other subclasses have a different default anchorPoint. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>anchorPoint is the point around which all transformations and positioning manipulations take place. It's like a pin in the node where it is "attached" to its parent. The anchorPoint is normalized, like a percentage. (0,0) means the bottom-left corner and (1,1) means the top-right corner. But you can use values higher than (1,1) and lower than (0,0) too. The default anchorPoint is (0,0). It starts in the bottom-left corner. <see cref="T:MonoTouch.Cocos2D.CCSprite" /> and other subclasses have a different default anchorPoint. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPointInPoints">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF AnchorPointInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.PointF AnchorPointInPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("anchorPointInPoints")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The anchorPoint in absolute pixels. Since v0.8 you can only read it. If you wish to modify it, use anchorPoint instead </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The anchorPoint in absolute pixels. Since v0.8 you can only read it. If you wish to modify it, use anchorPoint instead </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("boundingBox")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Camera">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCCamera Camera { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Cocos2D.CCCamera Camera" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("camera")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>A <see cref="T:MonoTouch.Cocos2D.CCCamera" /> object that lets you move the node using a gluLookAt </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>A <see cref="T:MonoTouch.Cocos2D.CCCamera" /> object that lets you move the node using a gluLookAt </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCNode[] Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Cocos2D.CCNode[] Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("children")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCNode[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Array of children </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Array of children </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cleanup">
      <MemberSignature Language="C#" Value="public virtual void Cleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cleanup() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cleanup")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Event that is called when the running node is no longer running (eg: its <see cref="T:MonoTouch.Cocos2D.CCScene" /> is being removed from the "stage" ). On cleanup you should break any possible circular references. <see cref="T:MonoTouch.Cocos2D.CCNode" />'s cleanup removes any possible scheduled timer and/or any possible action. If you override cleanup, you shall call [super cleanup] <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Event that is called when the running node is no longer running (eg: its <see cref="T:MonoTouch.Cocos2D.CCScene" /> is being removed from the "stage" ). On cleanup you should break any possible circular references. <see cref="T:MonoTouch.Cocos2D.CCNode" />'s cleanup removes any possible scheduled timer and/or any possible action. If you override cleanup, you shall call [super cleanup] <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF ContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF ContentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("contentSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setContentSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The untransformed size of the node in Points The contentSize remains the same no matter the node is scaled or rotated. All nodes has a size. Layer and Scene has the same size of the screen. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The untransformed size of the node in Points The contentSize remains the same no matter the node is scaled or rotated. All nodes has a size. Layer and Scene has the same size of the screen. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToNodeSpace">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ConvertToNodeSpace (System.Drawing.PointF worldPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF ConvertToNodeSpace(valuetype System.Drawing.PointF worldPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertToNodeSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worldPoint" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="worldPoint">To be added.</param>
        <summary>
          <para>Converts a Point to node (local) space coordinates. The result is in Points. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Converts a Point to node (local) space coordinates. The result is in Points. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToNodeSpaceAnchorRelative">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ConvertToNodeSpaceAnchorRelative (System.Drawing.PointF worldPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF ConvertToNodeSpaceAnchorRelative(valuetype System.Drawing.PointF worldPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertToNodeSpaceAR:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worldPoint" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="worldPoint">To be added.</param>
        <summary>
          <para>Converts a Point to node (local) space coordinates. The result is in Points. treating the returned/received node point as anchor relative. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Converts a Point to node (local) space coordinates. The result is in Points. treating the returned/received node point as anchor relative. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTouchToNodeSpace">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ConvertTouchToNodeSpace (MonoTouch.UIKit.UITouch touch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF ConvertTouchToNodeSpace(class MonoTouch.UIKit.UITouch touch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertTouchToNodeSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="MonoTouch.UIKit.UITouch" />
      </Parameters>
      <Docs>
        <param name="touch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTouchToNodeSpaceAnchorRelative">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ConvertTouchToNodeSpaceAnchorRelative (MonoTouch.UIKit.UITouch touch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF ConvertTouchToNodeSpaceAnchorRelative(class MonoTouch.UIKit.UITouch touch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertTouchToNodeSpaceAR:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="MonoTouch.UIKit.UITouch" />
      </Parameters>
      <Docs>
        <param name="touch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldSpace">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ConvertToWorldSpace (System.Drawing.PointF nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF ConvertToWorldSpace(valuetype System.Drawing.PointF nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertToWorldSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>
          <para>Converts a Point to world space coordinates. The result is in Points. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Converts a Point to world space coordinates. The result is in Points. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToWorldSpaceAnchorRelative">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ConvertToWorldSpaceAnchorRelative (System.Drawing.PointF nodePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF ConvertToWorldSpaceAnchorRelative(valuetype System.Drawing.PointF nodePoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertToWorldSpaceAR:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePoint" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="nodePoint">To be added.</param>
        <summary>
          <para>Converts a local Point to world space coordinates.The result is in Points. treating the returned/received node point as anchor relative. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Converts a local Point to world space coordinates.The result is in Points. treating the returned/received node point as anchor relative. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("draw")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Override this method to draw your own node. You should use cocos2d's GL API to enable/disable the GL state / shaders. For further info, please see ccGLstate.h. You shall NOT call [super draw]; </para>
        </summary>
        <remarks>
          <para>Override this method to draw your own node. You should use cocos2d's GL API to enable/disable the GL state / shaders. For further info, please see ccGLstate.h. You shall NOT call [super draw]; </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionByTag">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCAction GetActionByTag (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCAction GetActionByTag(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("getActionByTag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>
          <para>Gets an action from the running action list given its tag <simplesect kind="since"><para>v0.7.1 </para></simplesect><simplesect kind="return"><para>the Action the with the given tag </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Gets an action from the running action list given its tag <simplesect kind="since"><para>v0.7.1 </para></simplesect><simplesect kind="return"><para>the Action the with the given tag </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChild">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCNode GetChild (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCNode GetChild(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("getChildByTag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>
          <para>Gets a child from the container given its tag <simplesect kind="return"><para>returns a <see cref="T:MonoTouch.Cocos2D.CCNode" /> object </para></simplesect><simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Gets a child from the container given its tag <simplesect kind="return"><para>returns a <see cref="T:MonoTouch.Cocos2D.CCNode" /> object </para></simplesect><simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public virtual bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isRunning")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>whether or not the node is running </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>whether or not the node is running </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeToParentTransform">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGAffineTransform NodeToParentTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGAffineTransform NodeToParentTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("nodeToParentTransform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Returns the matrix that transform the node's (local) space coordinates into the parent's space coordinates. The matrix is in Pixels. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns the matrix that transform the node's (local) space coordinates into the parent's space coordinates. The matrix is in Pixels. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeToWorldTransform">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGAffineTransform NodeToWorldTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGAffineTransform NodeToWorldTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("nodeToWorldTransform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfRunningActions">
      <MemberSignature Language="C#" Value="public virtual int NumberOfRunningActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NumberOfRunningActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("numberOfRunningActions")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays). Composable actions are counted as 1 action. Example: If you are running 1 Sequence of 7 actions, it will return 1. If you are running 7 Sequences of 2 actions, it will return 7. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays). Composable actions are counted as 1 action. Example: If you are running 1 Sequence of 7 actions, it will return 1. If you are running 7 Sequences of 2 actions, it will return 7. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="public virtual void OnEnter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("onEnter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Event that is called every time the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters the 'stage'. If the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters the 'stage' with a transition, this event is called when the transition starts. During onEnter you can't access a sibling node. If you override onEnter, you shall call [super onEnter]. </para>
        </summary>
        <remarks>
          <para>Event that is called every time the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters the 'stage'. If the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters the 'stage' with a transition, this event is called when the transition starts. During onEnter you can't access a sibling node. If you override onEnter, you shall call [super onEnter]. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnterTransitionDidFinish">
      <MemberSignature Language="C#" Value="public virtual void OnEnterTransitionDidFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnterTransitionDidFinish() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("onEnterTransitionDidFinish")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Event that is called when the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters in the 'stage'. If the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters the 'stage' with a transition, this event is called when the transition finishes. If you override onEnterTransitionDidFinish, you shall call [super onEnterTransitionDidFinish]. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Event that is called when the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters in the 'stage'. If the <see cref="T:MonoTouch.Cocos2D.CCNode" /> enters the 'stage' with a transition, this event is called when the transition finishes. If you override onEnterTransitionDidFinish, you shall call [super onEnterTransitionDidFinish]. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExit">
      <MemberSignature Language="C#" Value="public virtual void OnExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("onExit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Event that is called every time the <see cref="T:MonoTouch.Cocos2D.CCNode" /> leaves the 'stage'. If the <see cref="T:MonoTouch.Cocos2D.CCNode" /> leaves the 'stage' with a transition, this event is called when the transition finishes. During onExit you can't access a sibling node. If you override onExit, you shall call [super onExit]. </para>
        </summary>
        <remarks>
          <para>Event that is called every time the <see cref="T:MonoTouch.Cocos2D.CCNode" /> leaves the 'stage'. If the <see cref="T:MonoTouch.Cocos2D.CCNode" /> leaves the 'stage' with a transition, this event is called when the transition finishes. During onExit you can't access a sibling node. If you override onExit, you shall call [super onExit]. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentToNodeTransform">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGAffineTransform ParentToNodeTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGAffineTransform ParentToNodeTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("parentToNodeTransform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseSchedulerAndActions">
      <MemberSignature Language="C#" Value="public virtual void PauseSchedulerAndActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PauseSchedulerAndActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pauseSchedulerAndActions")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>pauses all scheduled selectors and actions. Called internally by onExit </para>
        </summary>
        <remarks>
          <para>pauses all scheduled selectors and actions. Called internally by onExit </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.PointF Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("position")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Position (x,y) of the node in points. (0,0) is the left-bottom corner. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Position (x,y) of the node in points. (0,0) is the left-bottom corner. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (MonoTouch.Cocos2D.CCNode child, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class MonoTouch.Cocos2D.CCNode child, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeChild:cleanup:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="MonoTouch.Cocos2D.CCNode" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>
          <para>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (int tag, bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(int32 tag, bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeChildByTag:cleanup:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <param name="cleanup">To be added.</param>
        <summary>
          <para>Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildrenWithCleanup">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllChildrenWithCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildrenWithCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeAllChildrenWithCleanup:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">To be added.</param>
        <summary>
          <para>Removes all children from the container and do a cleanup all running actions depending on the cleanup parameter. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Removes all children from the container and do a cleanup all running actions depending on the cleanup parameter. <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParentAndCleanup">
      <MemberSignature Language="C#" Value="public virtual void RemoveFromParentAndCleanup (bool cleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromParentAndCleanup(bool cleanup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeFromParentAndCleanup:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cleanup">To be added.</param>
        <summary>
          <para>Remove itself from its parent node. If cleanup is YES, then also remove all actions and callbacks. If the node orphan, then nothing happens. <simplesect kind="since"><para>v0.99.3 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Remove itself from its parent node. If cleanup is YES, then also remove all actions and callbacks. If the node orphan, then nothing happens. <simplesect kind="since"><para>v0.99.3 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderChild">
      <MemberSignature Language="C#" Value="public virtual void ReorderChild (MonoTouch.Cocos2D.CCNode child, int zOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderChild(class MonoTouch.Cocos2D.CCNode child, int32 zOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reorderChild:z:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="MonoTouch.Cocos2D.CCNode" />
        <Parameter Name="zOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="zOrder">To be added.</param>
        <summary>
          <para>Reorders a child according to a new z value. The child MUST be already added. </para>
        </summary>
        <remarks>
          <para>Reorders a child according to a new z value. The child MUST be already added. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatForever">
      <MemberSignature Language="C#" Value="public const uint RepeatForever = 4294967294;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int32 RepeatForever = (4294967294)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <MemberValue>4294967294</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeSchedulerAndActions">
      <MemberSignature Language="C#" Value="public virtual void ResumeSchedulerAndActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResumeSchedulerAndActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("resumeSchedulerAndActions")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>resumes all scheduled selectors and actions. Called internally by onEnter </para>
        </summary>
        <remarks>
          <para>resumes all scheduled selectors and actions. Called internally by onEnter </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public virtual float Rotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("rotation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRotation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunAction">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCAction RunAction (MonoTouch.Cocos2D.CCAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCAction RunAction(class MonoTouch.Cocos2D.CCAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("runAction:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="MonoTouch.Cocos2D.CCAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>
          <para>Executes an action, and returns the action that is executed. The node becomes the action's target. <simplesect kind="warning"><para>Starting from v0.8 actions don't retain their target anymore. </para></simplesect><simplesect kind="since"><para>v0.7.1 </para></simplesect><simplesect kind="return"><para>An Action pointer </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Executes an action, and returns the action that is executed. The node becomes the action's target. <simplesect kind="warning"><para>Starting from v0.8 actions don't retain their target anymore. </para></simplesect><simplesect kind="since"><para>v0.7.1 </para></simplesect><simplesect kind="return"><para>An Action pointer </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual float Scale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The scale factor of the node. 1.0 is the default scale factor. It modifies the X and Y scale at the same time. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The scale factor of the node. 1.0 is the default scale factor. It modifies the X and Y scale at the same time. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleX">
      <MemberSignature Language="C#" Value="public virtual float ScaleX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scaleX")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScaleX:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The scale factor of the node. 1.0 is the default scale factor. It only modifies the X scale factor. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The scale factor of the node. 1.0 is the default scale factor. It only modifies the X scale factor. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleY">
      <MemberSignature Language="C#" Value="public virtual float ScaleY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ScaleY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scaleY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScaleY:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The scale factor of the node. 1.0 is the default scale factor. It only modifies the Y scale factor. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The scale factor of the node. 1.0 is the default scale factor. It only modifies the Y scale factor. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual void Schedule (MonoTouch.ObjCRuntime.Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class MonoTouch.ObjCRuntime.Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("schedule:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <summary>
          <para>schedules a selector. The scheduled selector will be ticked every frame </para>
        </summary>
        <remarks>
          <para>schedules a selector. The scheduled selector will be ticked every frame </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Action&lt;float&gt; callback, float interval = 0, uint repeat = 4294967294, float delay = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class System.Action`1&lt;float32&gt; callback, float32 interval, unsigned int32 repeat, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="interval" Type="System.Single" />
        <Parameter Name="repeat" Type="System.UInt32" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="interval">To be added.</param>
        <param name="repeat">To be added.</param>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheduleinterval">
      <MemberSignature Language="C#" Value="public virtual void Scheduleinterval (MonoTouch.ObjCRuntime.Selector selector, float seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scheduleinterval(class MonoTouch.ObjCRuntime.Selector selector, float32 seconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("schedule:interval:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="seconds" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="seconds">To be added.</param>
        <summary>
          <para>schedules a custom selector with an interval time in seconds. If time is 0 it will be ticked every frame. If time is 0, it is recommended to use 'scheduleUpdate' instead.</para>
        </summary>
        <remarks>
          <para>schedules a custom selector with an interval time in seconds. If time is 0 it will be ticked every frame. If time is 0, it is recommended to use 'scheduleUpdate' instead.</para>
          <para>If the selector is already scheduled, then the interval parameter will be updated without scheduling it again. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleOnce">
      <MemberSignature Language="C#" Value="public void ScheduleOnce (Action&lt;float&gt; callback, float delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScheduleOnce(class System.Action`1&lt;float32&gt; callback, float32 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Single&gt;" />
        <Parameter Name="delay" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleUpdate">
      <MemberSignature Language="C#" Value="public virtual void ScheduleUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scheduleUpdate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>check whether a selector is scheduled. schedules the "update" method. It will use the order number 0. This method will be called every frame. Scheduled methods with a lower order value will be called before the ones that have a higher order value. Only one "udpate" method could be scheduled per node.</para>
        </summary>
        <remarks>
          <para>check whether a selector is scheduled. schedules the "update" method. It will use the order number 0. This method will be called every frame. Scheduled methods with a lower order value will be called before the ones that have a higher order value. Only one "udpate" method could be scheduled per node.</para>
          <para>
            <simplesect kind="since">
              <para>v0.99.3 </para>
            </simplesect>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleUpdate">
      <MemberSignature Language="C#" Value="public virtual void ScheduleUpdate (int priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleUpdate(int32 priority) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scheduleUpdateWithPriority:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="priority">To be added.</param>
        <summary>
          <para>schedules the "update" selector with a custom priority. This selector will be called every frame. Scheduled selectors with a lower priority will be called before the ones that have a higher value. Only one "udpate" selector could be scheduled per node (You can't have 2 'update' selectors).</para>
        </summary>
        <remarks>
          <para>schedules the "update" selector with a custom priority. This selector will be called every frame. Scheduled selectors with a lower priority will be called before the ones that have a higher value. Only one "udpate" selector could be scheduled per node (You can't have 2 'update' selectors).</para>
          <para>
            <simplesect kind="since">
              <para>v0.99.3 </para>
            </simplesect>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewX">
      <MemberSignature Language="C#" Value="public virtual float SkewX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("skewX")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSkewX:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The X skew angle of the node in degrees. This angle describes the shear distortion in the X direction. Thus, it is the angle between the Y axis and the left edge of the shape The default skewX angle is 0. Positive values distort the node in a CW direction. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The X skew angle of the node in degrees. This angle describes the shear distortion in the X direction. Thus, it is the angle between the Y axis and the left edge of the shape The default skewX angle is 0. Positive values distort the node in a CW direction. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkewY">
      <MemberSignature Language="C#" Value="public virtual float SkewY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SkewY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("skewY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSkewY:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The Y skew angle of the node in degrees. This angle describes the shear distortion in the Y direction. Thus, it is the angle between the X axis and the bottom edge of the shape The default skewY angle is 0. Positive values distort the node in a CCW direction. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The Y skew angle of the node in degrees. This angle describes the shear distortion in the Y direction. Thus, it is the angle between the X axis and the bottom edge of the shape The default skewY angle is 0. Positive values distort the node in a CCW direction. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAction">
      <MemberSignature Language="C#" Value="public virtual void StopAction (MonoTouch.Cocos2D.CCAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAction(class MonoTouch.Cocos2D.CCAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stopAction:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="MonoTouch.Cocos2D.CCAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>
          <para>Removes an action from the running action list </para>
        </summary>
        <remarks>
          <para>Removes an action from the running action list </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAction">
      <MemberSignature Language="C#" Value="public virtual void StopAction (int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAction(int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stopActionByTag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tag">To be added.</param>
        <summary>
          <para>Removes an action from the running action list given its tag <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Removes an action from the running action list given its tag <simplesect kind="since"><para>v0.7.1 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAllActions">
      <MemberSignature Language="C#" Value="public virtual void StopAllActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAllActions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stopAllActions")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Removes all actions from the running action list </para>
        </summary>
        <remarks>
          <para>Removes all actions from the running action list </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public virtual int Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tag")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>A tag used to identify the node easily </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>A tag used to identify the node easily </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual void Transform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Transform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("transform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>performs OpenGL view-matrix transformation based on position, scale, rotation and other attributes. </para>
        </summary>
        <remarks>
          <para>performs OpenGL view-matrix transformation based on position, scale, rotation and other attributes. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformAncestors">
      <MemberSignature Language="C#" Value="public virtual void TransformAncestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TransformAncestors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("transformAncestors")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>performs OpenGL view-matrix transformation of its ancestors. Generally the ancestors are already transformed, but in certain cases (eg: attaching a FBO) it is necessary to transform the ancestors again. <simplesect kind="since"><para>v0.7.2 </para></simplesect></para>
        </summary>
        <remarks>
          <para>performs OpenGL view-matrix transformation of its ancestors. Generally the ancestors are already transformed, but in certain cases (eg: attaching a FBO) it is necessary to transform the ancestors again. <simplesect kind="since"><para>v0.7.2 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public virtual void Unschedule (MonoTouch.ObjCRuntime.Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unschedule(class MonoTouch.ObjCRuntime.Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unschedule:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <summary>
          <para>unschedules a custom selector. </para>
        </summary>
        <remarks>
          <para>unschedules a custom selector. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnscheduleAllSelectors">
      <MemberSignature Language="C#" Value="public virtual void UnscheduleAllSelectors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnscheduleAllSelectors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unscheduleAllSelectors")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>
            <verbatim>unschedule all scheduled selectors: custom selectors, and the 'update' selector.
</verbatim> Actions are not affected by this method. <simplesect kind="since"><para>v0.99.3 </para></simplesect></para>
        </summary>
        <remarks>
          <para>
            <verbatim>unschedule all scheduled selectors: custom selectors, and the 'update' selector.
</verbatim> Actions are not affected by this method. <simplesect kind="since"><para>v0.99.3 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnscheduleUpdate">
      <MemberSignature Language="C#" Value="public virtual void UnscheduleUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnscheduleUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unscheduleUpdate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserData">
      <MemberSignature Language="C#" Value="public virtual IntPtr UserData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int UserData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("userData")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setUserData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>A custom user data pointer </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>A custom user data pointer </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexZ">
      <MemberSignature Language="C#" Value="public virtual float VertexZ { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 VertexZ" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("vertexZ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setVertexZ:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The real openGL Z vertex. Differences between openGL Z vertex and cocos2d Z order:<list type="bullet"><item><description>OpenGL Z modifies the Z vertex, and not the Z order in the relation between parent-children</description></item><item><description>OpenGL Z might require to set 2D projection</description></item><item><description>cocos2d Z order works OK if all the nodes uses the same openGL Z vertex. eg: vertexZ = 0 : Use it at your own risk since it might break the cocos2d parent-children z order v0.8 </description></item></list></para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The real openGL Z vertex. Differences between openGL Z vertex and cocos2d Z order:<list type="bullet"><item><description>OpenGL Z modifies the Z vertex, and not the Z order in the relation between parent-children</description></item><item><description>OpenGL Z might require to set 2D projection</description></item><item><description>cocos2d Z order works OK if all the nodes uses the same openGL Z vertex. eg: vertexZ = 0 : Use it at your own risk since it might break the cocos2d parent-children z order v0.8 </description></item></list></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("visible")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setVisible:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Whether of not the node is visible. Default is YES </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Whether of not the node is visible. Default is YES </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual void Visit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Visit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("visit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>recursive method that visit its children and draw them </para>
        </summary>
        <remarks>
          <para>recursive method that visit its children and draw them </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorldToNodeTransform">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGAffineTransform WorldToNodeTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGAffineTransform WorldToNodeTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("worldToNodeTransform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZOrder">
      <MemberSignature Language="C#" Value="public virtual int ZOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ZOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("zOrder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setZOrder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The z order of the node relative to its "siblings": children of the same parent </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>The z order of the node relative to its "siblings": children of the same parent </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>