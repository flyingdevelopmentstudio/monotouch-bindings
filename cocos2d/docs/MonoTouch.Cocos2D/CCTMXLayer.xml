<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCTMXLayer" FullName="MonoTouch.Cocos2D.CCTMXLayer">
  <TypeSignature Language="C#" Value="public class CCTMXLayer : MonoTouch.Cocos2D.CCSpriteBatchNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCTMXLayer extends MonoTouch.Cocos2D.CCSpriteBatchNode" />
  <AssemblyInfo>
    <AssemblyName>Cocos2D</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Cocos2D.CCSpriteBatchNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CCTMXLayer", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
        <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" /> represents the TMX layer.</para>
    </summary>
    <remarks>
      <para>
        <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" /> represents the TMX layer.</para>
      <para>It is a subclass of <see cref="T:MonoTouch.Cocos2D.CCSpriteBatchNode" />. By default the tiles are rendered using a <see cref="T:MonoTouch.Cocos2D.CCTextureAtlas" />. If you mofify a tile on runtime, then, that tile will become a <see cref="T:MonoTouch.Cocos2D.CCSprite" />, otherwise no <see cref="T:MonoTouch.Cocos2D.CCSprite" /> objects are created. The benefits of using <see cref="T:MonoTouch.Cocos2D.CCSprite" /> objects as tiles are:<list type="bullet"><item><description>tiles (CCSprite) can be rotated/scaled/moved with a nice API</description></item></list></para>
      <para>cocos2d v2.0 doesn't support the cc_vertexz value. Whenever a the cc_vertexz property is found, it will raise an exception.</para>
      <para>"value" by default is 0, but you can change it from Tiled by adding the "cc_alpha_func" property to the layer. The value 0 should work for most cases, but if you have tiles that are semi-transparent, then you might want to use a differnt value, like 0.5.</para>
      <para>For further information, please see the programming guide: <verbatim>   http://www.cocos2d-iphone.org/wiki/doku.php/prog_guide:tiled_maps
</verbatim></para>
      <para>
        <simplesect kind="since">
          <para>v0.8.1</para>
        </simplesect>
Tiles can have tile flags for additional properties. At the moment only flip horizontal and flip vertical are used. These bit flags are defined in CCTMXXMLParser.h.</para>
      <para>
        <simplesect kind="since">
          <para>1.1 </para>
        </simplesect>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTMXLayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTMXLayer (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTMXLayer (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTMXLayer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTMXLayer (MonoTouch.Cocos2D.CCTMXTilesetInfo tilesetInfo, MonoTouch.Cocos2D.CCTMXLayerInfo layerInfo, MonoTouch.Cocos2D.CCTMXMapInfo mapInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Cocos2D.CCTMXTilesetInfo tilesetInfo, class MonoTouch.Cocos2D.CCTMXLayerInfo layerInfo, class MonoTouch.Cocos2D.CCTMXMapInfo mapInfo) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithTilesetInfo:layerInfo:mapInfo:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="tilesetInfo" Type="MonoTouch.Cocos2D.CCTMXTilesetInfo" />
        <Parameter Name="layerInfo" Type="MonoTouch.Cocos2D.CCTMXLayerInfo" />
        <Parameter Name="mapInfo" Type="MonoTouch.Cocos2D.CCTMXMapInfo" />
      </Parameters>
      <Docs>
        <param name="tilesetInfo">To be added.</param>
        <param name="layerInfo">To be added.</param>
        <param name="mapInfo">To be added.</param>
        <summary>
          <para>initializes a <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" /> with a tileset info, a layer info and a map info </para>
        </summary>
        <remarks>
          <para>initializes a <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" /> with a tileset info, a layer info and a map info </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (MonoTouch.Cocos2D.CCNode node, int z, int tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class MonoTouch.Cocos2D.CCNode node, int32 z, int32 tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addChild:z:tag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="MonoTouch.Cocos2D.CCNode" />
        <Parameter Name="z" Type="System.Int32" />
        <Parameter Name="tag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="z">To be added.</param>
        <param name="tag">To be added.</param>
        <summary>
          <para>
            <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" /> doesn't support adding a <see cref="T:MonoTouch.Cocos2D.CCSprite" /> manually. <simplesect kind="warning"><para>addchild:z:tag: is not supported on <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" />. Instead of setTileGID:at:/tileAt: </para></simplesect></para>
        </summary>
        <remarks>
          <para>
            <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" /> doesn't support adding a <see cref="T:MonoTouch.Cocos2D.CCSprite" /> manually. <simplesect kind="warning"><para>addchild:z:tag: is not supported on <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" />. Instead of setTileGID:at:/tileAt: </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionAt">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF GetPositionAt (System.Drawing.PointF tileCoordinate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF GetPositionAt(valuetype System.Drawing.PointF tileCoordinate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionAt:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileCoordinate" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="tileCoordinate">To be added.</param>
        <summary>
          <para>returns the position in points of a given tile coordinate </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>returns the position in points of a given tile coordinate </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject GetProperty (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject GetProperty(string propertyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("propertyNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>
          <para>return the value for the specific property name </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>return the value for the specific property name </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTileAt">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCSprite GetTileAt (System.Drawing.PointF tileCoordinate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCSprite GetTileAt(valuetype System.Drawing.PointF tileCoordinate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tileAt:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCSprite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileCoordinate" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="tileCoordinate">To be added.</param>
        <summary>
          <para>returns the tile (<see cref="T:MonoTouch.Cocos2D.CCSprite" />) at a given a tile coordinate. The returned <see cref="T:MonoTouch.Cocos2D.CCSprite" /> will be already added to the <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" />. Don't add it again. The <see cref="T:MonoTouch.Cocos2D.CCSprite" /> can be treated like any other <see cref="T:MonoTouch.Cocos2D.CCSprite" />: rotated, scaled, translated, opacity, color, etc. You can remove either by calling:<list type="bullet"><item><description>[layer removeChild:sprite cleanup:cleanup];</description></item><item><description>or [layer removeTileAt:ccp(x,y)]; </description></item></list></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>returns the tile (<see cref="T:MonoTouch.Cocos2D.CCSprite" />) at a given a tile coordinate. The returned <see cref="T:MonoTouch.Cocos2D.CCSprite" /> will be already added to the <see cref="T:MonoTouch.Cocos2D.CCTMXLayer" />. Don't add it again. The <see cref="T:MonoTouch.Cocos2D.CCSprite" /> can be treated like any other <see cref="T:MonoTouch.Cocos2D.CCSprite" />: rotated, scaled, translated, opacity, color, etc. You can remove either by calling:<list type="bullet"><item><description>[layer removeChild:sprite cleanup:cleanup];</description></item><item><description>or [layer removeTileAt:ccp(x,y)]; </description></item></list></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTileGid">
      <MemberSignature Language="C#" Value="public virtual uint GetTileGid (System.Drawing.PointF tileCoordinate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 GetTileGid(valuetype System.Drawing.PointF tileCoordinate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tileGIDAt:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileCoordinate" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="tileCoordinate">To be added.</param>
        <summary>
          <para>returns the tile gid at a given tile coordinate. if it returns 0, it means that the tile is empty. This method requires the the tile map has not been previously released (eg. don't call [layer releaseMap]) </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>returns the tile gid at a given tile coordinate. if it returns 0, it means that the tile is empty. This method requires the the tile map has not been previously released (eg. don't call [layer releaseMap]) </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTileGid">
      <MemberSignature Language="C#" Value="public virtual uint GetTileGid (System.Drawing.PointF position, ref MonoTouch.Cocos2D.CCTMXTileFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 GetTileGid(valuetype System.Drawing.PointF position, valuetype MonoTouch.Cocos2D.CCTMXTileFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tileGIDAt:withFlags:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Drawing.PointF" />
        <Parameter Name="flags" Type="MonoTouch.Cocos2D.CCTMXTileFlags&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>
          <para>returns the tile gid at a given tile coordinate. It also returns the tile flags. This method requires the the tile map has not been previously released (eg. don't call [layer releaseMap]) </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>returns the tile gid at a given tile coordinate. It also returns the tile flags. This method requires the the tile map has not been previously released (eg. don't call [layer releaseMap]) </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayerName">
      <MemberSignature Language="C#" Value="public virtual string LayerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LayerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("layerName")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLayerName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>name of the layer </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>name of the layer </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayerOrientation">
      <MemberSignature Language="C#" Value="public virtual uint LayerOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 LayerOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("layerOrientation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLayerOrientation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Layer orientation, which is the same as the map orientation </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Layer orientation, which is the same as the map orientation </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayerSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF LayerSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF LayerSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("layerSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLayerSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>size of the layer in tiles </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>size of the layer in tiles </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapTileSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF MapTileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF MapTileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("mapTileSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMapTileSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>size of the map's tile (could be differnt from the tile's size) </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>size of the map's tile (could be differnt from the tile's size) </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSMutableArray Properties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSMutableArray Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("properties")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setProperties:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSMutableArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>properties from the layer. They can be added using Tiled </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>properties from the layer. They can be added using Tiled </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMap">
      <MemberSignature Language="C#" Value="public virtual void ReleaseMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMap() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("releaseMap")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>dealloc the map that contains the tile position from memory. Unless you want to know at runtime the tiles positions, you can safely call this method. If you are going to call [layer tileGIDAt:] then, don't release the map </para>
        </summary>
        <remarks>
          <para>dealloc the map that contains the tile position from memory. Unless you want to know at runtime the tiles positions, you can safely call this method. If you are going to call [layer tileGIDAt:] then, don't release the map </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTile">
      <MemberSignature Language="C#" Value="public virtual void RemoveTile (System.Drawing.PointF tileCoordinate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTile(valuetype System.Drawing.PointF tileCoordinate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeTileAt:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileCoordinate" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="tileCoordinate">To be added.</param>
        <summary>
          <para>removes a tile at given tile coordinate </para>
        </summary>
        <remarks>
          <para>removes a tile at given tile coordinate </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTileGid">
      <MemberSignature Language="C#" Value="public virtual void SetTileGid (uint gid, System.Drawing.PointF tileCoordinate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTileGid(unsigned int32 gid, valuetype System.Drawing.PointF tileCoordinate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setTileGID:at:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gid" Type="System.UInt32" />
        <Parameter Name="tileCoordinate" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="gid">To be added.</param>
        <param name="tileCoordinate">To be added.</param>
        <summary>
          <para>sets the tile gid (gid = tile global id) at a given tile coordinate. The Tile GID can be obtained by using the method "tileGIDAt" or by using the TMX editor -&gt; Tileset Mgr +1. If a tile is already placed at that position, then it will be removed. </para>
        </summary>
        <remarks>
          <para>sets the tile gid (gid = tile global id) at a given tile coordinate. The Tile GID can be obtained by using the method "tileGIDAt" or by using the TMX editor -&gt; Tileset Mgr +1. If a tile is already placed at that position, then it will be removed. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTileGid">
      <MemberSignature Language="C#" Value="public virtual void SetTileGid (uint gid, System.Drawing.PointF at, MonoTouch.Cocos2D.CCTMXTileFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTileGid(unsigned int32 gid, valuetype System.Drawing.PointF at, valuetype MonoTouch.Cocos2D.CCTMXTileFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setTileGID:at:withFlags:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gid" Type="System.UInt32" />
        <Parameter Name="at" Type="System.Drawing.PointF" />
        <Parameter Name="flags" Type="MonoTouch.Cocos2D.CCTMXTileFlags" />
      </Parameters>
      <Docs>
        <param name="gid">To be added.</param>
        <param name="at">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>
          <para>sets the tile gid (gid = tile global id) at a given tile coordinate. The Tile GID can be obtained by using the method "tileGIDAt" or by using the TMX editor -&gt; Tileset Mgr +1. If a tile is already placed at that position, then it will be removed.</para>
        </summary>
        <remarks>
          <para>sets the tile gid (gid = tile global id) at a given tile coordinate. The Tile GID can be obtained by using the method "tileGIDAt" or by using the TMX editor -&gt; Tileset Mgr +1. If a tile is already placed at that position, then it will be removed.</para>
          <para>Use withFlags if the tile flags need to be changed as well </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetupTiles">
      <MemberSignature Language="C#" Value="public virtual void SetupTiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetupTiles() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setupTiles")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Creates the tiles </para>
        </summary>
        <remarks>
          <para>Creates the tiles </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tileset">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCTMXTilesetInfo Tileset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Cocos2D.CCTMXTilesetInfo Tileset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tileset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTileset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCTMXTilesetInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Tilset information for the layer </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Tilset information for the layer </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TilesPtr">
      <MemberSignature Language="C#" Value="public virtual IntPtr TilesPtr { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int TilesPtr" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tiles")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTiles:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>pointer to the map of tiles </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>pointer to the map of tiles </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>