<?xml version="1.0" encoding="utf-8"?>
<Type Name="CCTextureCache" FullName="MonoTouch.Cocos2D.CCTextureCache">
  <TypeSignature Language="C#" Value="public class CCTextureCache : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCTextureCache extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Cocos2D</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CCTextureCache", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Singleton that handles the loading of textures Once the texture is loaded, the next time it will return a reference of the previously loaded texture reducing GPU &amp; CPU memory </para>
    </summary>
    <remarks>
      <para>Singleton that handles the loading of textures Once the texture is loaded, the next time it will return a reference of the previously loaded texture reducing GPU &amp; CPU memory </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTextureCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTextureCache (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTextureCache (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCTextureCache (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCGImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCTexture2D AddCGImage (MonoTouch.CoreGraphics.CGImage image, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCTexture2D AddCGImage(class MonoTouch.CoreGraphics.CGImage image, string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addCGImage:forKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCTexture2D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
          <para>Returns a Texture2D object given an CGImageRef image If the image was not previously loaded, it will create a new <see cref="T:MonoTouch.Cocos2D.CCTexture2D" /> object and it will return it. Otherwise it will return a reference of a previously loaded image The "key" parameter will be used as the "key" for the cache. If "key" is nil, then a new texture will be created each time. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns a Texture2D object given an CGImageRef image If the image was not previously loaded, it will create a new <see cref="T:MonoTouch.Cocos2D.CCTexture2D" /> object and it will return it. Otherwise it will return a reference of a previously loaded image The "key" parameter will be used as the "key" for the cache. If "key" is nil, then a new texture will be created each time. <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCTexture2D AddImage (string fileImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCTexture2D AddImage(string fileImage) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCTexture2D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileImage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileImage">To be added.</param>
        <summary>
          <para>Returns a Texture2D object given an file image If the file image was not previously loaded, it will create a new <see cref="T:MonoTouch.Cocos2D.CCTexture2D" /> object and it will return it. It will use the filename as a key. Otherwise it will return a reference of a previosly loaded image. Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns a Texture2D object given an file image If the file image was not previously loaded, it will create a new <see cref="T:MonoTouch.Cocos2D.CCTexture2D" /> object and it will return it. It will use the filename as a key. Otherwise it will return a reference of a previosly loaded image. Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddImageAsync">
      <MemberSignature Language="C#" Value="public virtual void AddImageAsync (string filename, Action&lt;MonoTouch.Cocos2D.CCTexture2D&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddImageAsync(string filename, class System.Action`1&lt;class MonoTouch.Cocos2D.CCTexture2D&gt; callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addImageAsync:withBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="callback" Type="System.Action&lt;MonoTouch.Cocos2D.CCTexture2D&gt;" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>
          <para>Asynchronously, load a texture2d from a file. If the file image was previously loaded, it will use it. Otherwise it will load a texture in a new thread, and when the image is loaded, the block will be called. The callback will be called in the cocos2d thread, so it is safe to create any cocos2d object from the callback. Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif <simplesect kind="since"><para>v2.0 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Asynchronously, load a texture2d from a file. If the file image was previously loaded, it will use it. Otherwise it will load a texture in a new thread, and when the image is loaded, the block will be called. The callback will be called in the cocos2d thread, so it is safe to create any cocos2d object from the callback. Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif <simplesect kind="since"><para>v2.0 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddImageAsync">
      <MemberSignature Language="C#" Value="public virtual void AddImageAsync (string filename, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddImageAsync(string filename, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addImageAsync:target:selector:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <param name="target">To be added.</param>
        <param name="selector">To be added.</param>
        <summary>
          <para>Asynchronously, load a texture2d from a file. If the file image was previously loaded, it will use it. Otherwise it will load a texture in a new thread, and when the image is loaded, the callback will be called with the Texture2D as a parameter. The callback will be called in the cocos2d thread, so it is safe to create any cocos2d object from the callback. Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Asynchronously, load a texture2d from a file. If the file image was previously loaded, it will use it. Otherwise it will load a texture in a new thread, and when the image is loaded, the callback will be called with the Texture2D as a parameter. The callback will be called in the cocos2d thread, so it is safe to create any cocos2d object from the callback. Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPVRImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCTexture2D AddPVRImage (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCTexture2D AddPVRImage(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addPVRImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCTexture2D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <summary>
          <para>Returns a Texture2D object given an PVR filename. If the file image was not previously loaded, it will create a new <see cref="T:MonoTouch.Cocos2D.CCTexture2D" /> object and it will return it. Otherwise it will return a reference of a previosly loaded image </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns a Texture2D object given an PVR filename. If the file image was not previously loaded, it will create a new <see cref="T:MonoTouch.Cocos2D.CCTexture2D" /> object and it will return it. Otherwise it will return a reference of a previosly loaded image </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTexture">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Cocos2D.CCTexture2D GetTexture (string textureKeyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Cocos2D.CCTexture2D GetTexture(string textureKeyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCTexture2D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureKeyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureKeyName">To be added.</param>
        <summary>
          <para>Returns an already created texture. Returns nil if the texture doesn't exist. <simplesect kind="since"><para>v0.99.5 </para></simplesect></para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns an already created texture. Returns nil if the texture doesn't exist. <simplesect kind="since"><para>v0.99.5 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeSharedTextureCache">
      <MemberSignature Language="C#" Value="public static void PurgeSharedTextureCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PurgeSharedTextureCache() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("purgeSharedTextureCache")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>purges the cache. It releases the retained instance. <simplesect kind="since"><para>v0.99.0 </para></simplesect></para>
        </summary>
        <remarks>
          <para>purges the cache. It releases the retained instance. <simplesect kind="since"><para>v0.99.0 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllTextures">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllTextures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllTextures() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeAllTextures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Purges the dictionary of loaded textures. Call this method if you receive the "Memory Warning" In the short term: it will free some resources preventing your app from being killed In the medium term: it will allocate more resources In the long term: it will be the same </para>
        </summary>
        <remarks>
          <para>Purges the dictionary of loaded textures. Call this method if you receive the "Memory Warning" In the short term: it will free some resources preventing your app from being killed In the medium term: it will allocate more resources In the long term: it will be the same </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTexture">
      <MemberSignature Language="C#" Value="public virtual void RemoveTexture (MonoTouch.Cocos2D.CCTexture2D tex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTexture(class MonoTouch.Cocos2D.CCTexture2D tex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeTexture:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tex" Type="MonoTouch.Cocos2D.CCTexture2D" />
      </Parameters>
      <Docs>
        <param name="tex">To be added.</param>
        <summary>
          <para>Deletes a texture from the cache given a texture </para>
        </summary>
        <remarks>
          <para>Deletes a texture from the cache given a texture </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTexture">
      <MemberSignature Language="C#" Value="public virtual void RemoveTexture (string textureKeyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTexture(string textureKeyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeTextureForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureKeyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureKeyName">To be added.</param>
        <summary>
          <para>Deletes a texture from the cache given a its key name <simplesect kind="since"><para>v0.99.4 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Deletes a texture from the cache given a its key name <simplesect kind="since"><para>v0.99.4 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUnusedTextures">
      <MemberSignature Language="C#" Value="public virtual void RemoveUnusedTextures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveUnusedTextures() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeUnusedTextures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Removes unused textures Textures that have a retain count of 1 will be deleted It is convinient to call this method after when starting a new Scene <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </summary>
        <remarks>
          <para>Removes unused textures Textures that have a retain count of 1 will be deleted It is convinient to call this method after when starting a new Scene <simplesect kind="since"><para>v0.8 </para></simplesect></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedTextureCache">
      <MemberSignature Language="C#" Value="public static MonoTouch.Cocos2D.CCTextureCache SharedTextureCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Cocos2D.CCTextureCache SharedTextureCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("sharedTextureCache")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Cocos2D.CCTextureCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>